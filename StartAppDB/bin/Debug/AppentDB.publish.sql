/*
Deployment script for AppentDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AppentDB"
:setvar DefaultFilePrefix "AppentDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Schema [Events]...';


GO
CREATE SCHEMA [Events]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [SecurityManagement]...';


GO
CREATE SCHEMA [SecurityManagement]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Table [Events].[Activity]...';


GO
CREATE TABLE [Events].[Activity] (
    [Id]          INT            NOT NULL,
    [Name]        NVARCHAR (100) NOT NULL,
    [Description] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [Events].[Event]...';


GO
CREATE TABLE [Events].[Event] (
    [Id]               INT            NOT NULL,
    [Name]             NVARCHAR (100) NOT NULL,
    [OwnerId]          INT            NOT NULL,
    [ActivityId]       INT            NOT NULL,
    [Address]          NVARCHAR (200) NULL,
    [Time]             DATE           NULL,
    [CityId]           INT            NULL,
    [CountryId]        INT            NULL,
    [IsOpenToEveryone] BIT            NOT NULL,
    [MinimumPersons]   INT            NULL,
    [MaximumPersons]   INT            NULL,
    [Description]      NVARCHAR (MAX) NOT NULL,
    [ImagePath]        NVARCHAR (200) NULL,
    [RepetitionType]   INT            NULL,
    [AmIAttending]     BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [Events].[EventAttendees]...';


GO
CREATE TABLE [Events].[EventAttendees] (
    [Id]      INT NOT NULL,
    [EventId] INT NOT NULL,
    [UserId]  INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [Events].[EventRating]...';


GO
CREATE TABLE [Events].[EventRating] (
    [Id]      INT             NOT NULL,
    [UserId]  INT             NOT NULL,
    [EventId] INT             NOT NULL,
    [Rating]  DECIMAL (18, 2) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [Events].[FollowedActivity]...';


GO
CREATE TABLE [Events].[FollowedActivity] (
    [Id]         INT NOT NULL,
    [UserId]     INT NOT NULL,
    [ActivityId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [SecurityManagement].[UserGroupPolicy]...';


GO
CREATE TABLE [SecurityManagement].[UserGroupPolicy] (
    [Id]          INT IDENTITY (1, 1) NOT NULL,
    [PolicyId]    INT NOT NULL,
    [UserGroupId] INT NOT NULL,
    CONSTRAINT [PK_UserGroupPolicy] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [SecurityManagement].[UserGroup]...';


GO
CREATE TABLE [SecurityManagement].[UserGroup] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [PK_UserGroup] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [SecurityManagement].[User]...';


GO
CREATE TABLE [SecurityManagement].[User] (
    [Id]                        INT           IDENTITY (1, 1) NOT NULL,
    [FirstName]                 NVARCHAR (50) NOT NULL,
    [LastName]                  NVARCHAR (50) NOT NULL,
    [UserName]                  NVARCHAR (50) NOT NULL,
    [Password]                  NVARCHAR (50) NOT NULL,
    [PhoneNumber]               NVARCHAR (50) NULL,
    [IsConfirmed]               BIT           NOT NULL,
    [IsAdmin]                   BIT           NOT NULL,
    [ChangePasswordOnNextLogin] BIT           NULL,
    [CityId]                    INT           NULL,
    [CountryId]                 INT           NULL,
    [DateCreated]               DATE          NOT NULL,
    [IsEnabled]                 BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [SecurityManagement].[Policy]...';


GO
CREATE TABLE [SecurityManagement].[Policy] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (50)  NOT NULL,
    [JSONDocument] NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_Policy] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [SecurityManagement].[LoginSession]...';


GO
CREATE TABLE [SecurityManagement].[LoginSession] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [UserId]       INT            NOT NULL,
    [Created]      DATETIME       NOT NULL,
    [Expires]      DATETIME       NOT NULL,
    [IpAddress]    NVARCHAR (50)  NOT NULL,
    [RefreshToken] NVARCHAR (MAX) NOT NULL,
    [AccessToken]  NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [SecurityManagement].[UserUserGroup]...';


GO
CREATE TABLE [SecurityManagement].[UserUserGroup] (
    [Id]          INT IDENTITY (1, 1) NOT NULL,
    [UserId]      INT NOT NULL,
    [UserGroupId] INT NOT NULL,
    CONSTRAINT [PK_UserUserGroup] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [SecurityManagement].[UserNotifications]...';


GO
CREATE TABLE [SecurityManagement].[UserNotifications] (
    [Id]     INT            NOT NULL,
    [UserId] INT            NOT NULL,
    [Text]   NVARCHAR (100) NOT NULL,
    [Title]  NVARCHAR (50)  NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Foreign Key [Events].[FK_Event_Activity]...';


GO
ALTER TABLE [Events].[Event]
    ADD CONSTRAINT [FK_Event_Activity] FOREIGN KEY ([ActivityId]) REFERENCES [Events].[Activity] ([Id]);


GO
PRINT N'Creating Foreign Key [Events].[FK_EventAttendees_Event]...';


GO
ALTER TABLE [Events].[EventAttendees]
    ADD CONSTRAINT [FK_EventAttendees_Event] FOREIGN KEY ([EventId]) REFERENCES [Events].[Event] ([Id]);


GO
PRINT N'Creating Foreign Key [Events].[FK_EventAttendees_User]...';


GO
ALTER TABLE [Events].[EventAttendees]
    ADD CONSTRAINT [FK_EventAttendees_User] FOREIGN KEY ([UserId]) REFERENCES [SecurityManagement].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [Events].[FK_EventRating_User]...';


GO
ALTER TABLE [Events].[EventRating]
    ADD CONSTRAINT [FK_EventRating_User] FOREIGN KEY ([UserId]) REFERENCES [SecurityManagement].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [Events].[FK_EventRating_Event]...';


GO
ALTER TABLE [Events].[EventRating]
    ADD CONSTRAINT [FK_EventRating_Event] FOREIGN KEY ([EventId]) REFERENCES [Events].[Event] ([Id]);


GO
PRINT N'Creating Foreign Key [Events].[FK_FollowedActivity_Activity]...';


GO
ALTER TABLE [Events].[FollowedActivity]
    ADD CONSTRAINT [FK_FollowedActivity_Activity] FOREIGN KEY ([ActivityId]) REFERENCES [Events].[Activity] ([Id]);


GO
PRINT N'Creating Foreign Key [Events].[FK_FollowedActivity_User]...';


GO
ALTER TABLE [Events].[FollowedActivity]
    ADD CONSTRAINT [FK_FollowedActivity_User] FOREIGN KEY ([UserId]) REFERENCES [SecurityManagement].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [SecurityManagement].[FK_UserGroupPolicy_Policy]...';


GO
ALTER TABLE [SecurityManagement].[UserGroupPolicy]
    ADD CONSTRAINT [FK_UserGroupPolicy_Policy] FOREIGN KEY ([PolicyId]) REFERENCES [SecurityManagement].[Policy] ([Id]);


GO
PRINT N'Creating Foreign Key [SecurityManagement].[FK_UserGroupPolicy_UserGroup]...';


GO
ALTER TABLE [SecurityManagement].[UserGroupPolicy]
    ADD CONSTRAINT [FK_UserGroupPolicy_UserGroup] FOREIGN KEY ([UserGroupId]) REFERENCES [SecurityManagement].[UserGroup] ([Id]);


GO
PRINT N'Creating Foreign Key [SecurityManagement].[FK_LoginSession_User]...';


GO
ALTER TABLE [SecurityManagement].[LoginSession]
    ADD CONSTRAINT [FK_LoginSession_User] FOREIGN KEY ([UserId]) REFERENCES [SecurityManagement].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [SecurityManagement].[FK_UserUserGroup_User]...';


GO
ALTER TABLE [SecurityManagement].[UserUserGroup]
    ADD CONSTRAINT [FK_UserUserGroup_User] FOREIGN KEY ([UserId]) REFERENCES [SecurityManagement].[User] ([Id]);


GO
PRINT N'Creating Foreign Key [SecurityManagement].[FK_UserUserGroup_UserGroup]...';


GO
ALTER TABLE [SecurityManagement].[UserUserGroup]
    ADD CONSTRAINT [FK_UserUserGroup_UserGroup] FOREIGN KEY ([UserGroupId]) REFERENCES [SecurityManagement].[UserGroup] ([Id]);


GO
PRINT N'Creating Foreign Key [SecurityManagement].[FK_UserNotifications_User]...';


GO
ALTER TABLE [SecurityManagement].[UserNotifications]
    ADD CONSTRAINT [FK_UserNotifications_User] FOREIGN KEY ([UserId]) REFERENCES [SecurityManagement].[User] ([Id]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e48d8fe4-49a0-4e62-97ce-c75df1404d1d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e48d8fe4-49a0-4e62-97ce-c75df1404d1d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '095b52bc-a15b-4c27-b03a-c5561520f1cb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('095b52bc-a15b-4c27-b03a-c5561520f1cb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1d651616-267f-4fa3-98c9-34c2e33509a2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1d651616-267f-4fa3-98c9-34c2e33509a2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '16ab6cd4-db0c-4e84-8948-4790887c989a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('16ab6cd4-db0c-4e84-8948-4790887c989a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5c0eabe8-1519-4663-857c-32741332d38b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5c0eabe8-1519-4663-857c-32741332d38b')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
